/* я сделаль */

/*
    FUNCTION
    возвращает true, если существо, из которого сделан ингредиент, живое
    id - id ингредиента
*/
create or replace function isAlive (id integer)
returns boolean
as $$
    select spr.ЖИВОЕ as isAlive
    from СПРАВОЧНИК_СУЩЕСТВ as spr
        join ИНГРЕДИЕНТ as ing using(ИД_СУЩЕСТВА)
    where ing.ИД_ИНГРЕДИЕНТА=id
$$ LANGUAGE SQL;


/*
    FUNCTION
    Возвращает данные о существе, из которого добыт ингредиент
*/
create or replace function getCreatureInfo (id integer)
returns table (id integer, type text, name text, description text)
as $$
    select
        ing.ИД_СУЩЕСТВА as id,
        (case
        when (isAlive(ing.ИД_ИНГРЕДИЕНТА) = true)
            then
                ('alive creature')
            else
                ('mineral creature')
        end) as type,
        (case
        when (isAlive(ing.ИД_ИНГРЕДИЕНТА) = true)
            then
                (
                    select ВИД
                    from ЖИВОЕ_СУЩЕСТВО as m
                    where m.ИД_СУЩЕСТВА = ing.ИД_СУЩЕСТВА
                )
            else
                (
                    select ХИМИЧЕСКИЙ_ТИП
                    from МИНЕРАЛЬНОЕ_ВЕЩЕСТВО as m
                    where m.ИД_СУЩЕСТВА = ing.ИД_СУЩЕСТВА
                )
        end) as name,
        (case
        when (isAlive(ing.ИД_ИНГРЕДИЕНТА) = true)
            then
                (
                    select КЛАСС
                    from ЖИВОЕ_СУЩЕСТВО as m
                    where m.ИД_СУЩЕСТВА = ing.ИД_СУЩЕСТВА
                )
            else
                (
                    select ОПИСАНИЕ
                    from МИНЕРАЛЬНОЕ_ВЕЩЕСТВО as m
                    where m.ИД_СУЩЕСТВА = ing.ИД_СУЩЕСТВА
                )
        end) as description
    from ИНГРЕДИЕНТ as ing
    where ing.ИД_ИНГРЕДИЕНТА = id;
$$ LANGUAGE SQL;


/*
    FUNCTION
    Данные о лекарстве
*/
create or replace function getMedicineConsist (id integer)
returns table (ИД_ИНГРЕДИЕНТА integer, НАЗВАНИЕ text, СТОИМОСТЬ integer, МАССА float)
as $$
    select ИНГРЕДИЕНТ.ИД_ИНГРЕДИЕНТА,
        ИНГРЕДИЕНТ.НАЗВАНИЕ,
        ИНГРЕДИЕНТ.СТОИМОСТЬ,
        СОСТАВ.МАССА
    from СОСТАВ
        join ЛЕКАРСТВО using(ИД_ЛЕКАРСТВА)
        join ИНГРЕДИЕНТ using(ИД_ИНГРЕДИЕНТА)
    where ЛЕКАРСТВО.ИД_ЛЕКАРСТВА = id;
$$ LANGUAGE SQL;


/*
    FUNCTION
    Получить список лекарств, которые лечат одну болезнь
*/
create or replace function getMedicinesForDesiase (id integer)
returns table (id_medicine integer, name text, efficiency float)
as $$
    select ЛЕКАРСТВО.ИД_ЛЕКАРСТВА,
        ЛЕКАРСТВО.НАЗВАНИЕ,
        ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА.ЭФФЕКТИВНОСТЬ
    from ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА
        join БОЛЕЗНЬ using(ИД_БОЛЕЗНИ)
        join ЛЕКАРСТВО using(ИД_ЛЕКАРСТВА)
    where ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА.ЭФФЕКТИВНОСТЬ > 0.4
        and БОЛЕЗНЬ.ИД_БОЛЕЗНИ=id;
$$ LANGUAGE SQL;

/*
    FUNCTION
    Получает данные о заказах какой-либо сети
*/
create or replace function getTaskInfo (name text)
returns table (id_Medicine integer, name_Medicine text,
               medicine_Amount integer, number_In_queue integer,
               progress float, finish_Date Date)
as $$
    select ЛЕКАРСТВО.ИД_ЛЕКАРСТВА,
        ЛЕКАРСТВО.НАЗВАНИЕ,
        ЗАКАЗ.КОЛИЧЕСТВО,
        СТАТУС_ЗАКАЗА.НОМЕР_В_ОЧЕРЕДИ,
        СТАТУС_ЗАКАЗА.ВЫПОЛНЕНИЕ,
        СТАТУС_ЗАКАЗА.ДАТА_ЗАВЕРШЕНИЯ
    from ЗАКАЗ
        join ЛЕКАРСТВО using(ИД_ЛЕКАРСТВА)
        join СТАТУС_ЗАКАЗА using(ИД_ЗАКАЗА)
    where ЗАКАЗ.НАЗВАНИЕ_АПТЕЧНОЙ_СЕТИ=name
    order by СТАТУС_ЗАКАЗА.НОМЕР_В_ОЧЕРЕДИ;
$$ LANGUAGE SQL;



/*
    Получение данных об ингредиентах, которые есть в лекарствах в
    заказах у одной сети
*/
create or replace function getIngredientsPerMedicalGroup (name text)
returns table (ИД_ИНГРЕДИЕНТА integer, НАЗВАНИЕ text, СТОИМОСТЬ integer, МАССА float)
as $$
    select * from getMedicineConsist(
    (
        select ИД_ЛЕКАРСТВА
        from ЛЕКАРСТВО
            join ЗАКАЗ using(ИД_ЛЕКАРСТВА)
        where ЗАКАЗ.НАЗВАНИЕ_АПТЕЧНОЙ_СЕТИ = 'ABC')
    )
$$ LANGUAGE SQL;


/*
    Получение списка локаций, в которых имеется не меньше minAmount экземпляров
    существа с указанным ИД
*/
create or replace function getIngredientLocations (idIngredient integer, minAmount integer)
returns table (ИД_ЛОКАЦИИ integer, НАЗВАНИЕ text, ШИРОТА real, ДОЛГОТА real, КОЛИЧЕСТВО integer)
as $$
    select loc.ИД_ЛОКАЦИИ,
        aqu.НАЗВАНИЕ,
        loc.ШИРОТА,
        loc.ДОЛГОТА,
        loc.КОЛИЧЕСТВО
    from ЛОКАЦИЯ as loc
        join АКВАТОРИЯ as aqu using(ИД_АКВАТОРИИ)
    where loc.ИД_СУЩЕСТВА = (select ИД_СУЩЕСТВА from getCreatureInfo(idIngredient))
    group by loc.ИД_ЛОКАЦИИ, aqu.НАЗВАНИЕ, loc.ШИРОТА, loc.ДОЛГОТА, loc.КОЛИЧЕСТВО
    having loc.КОЛИЧЕСТВО > minAmount
$$ LANGUAGE SQL;


/*
    Теперь это есть актуальный список индексов
*/
create index эф_лек__эффективность on ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА(ЭФФЕКТИВНОСТЬ);
create index эф_лек__ид_болезни on ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА(ИД_БОЛЕЗНИ);

create index лек__название on ЛЕКАРСТВО using hash(НАЗВАНИЕ);
create index лек__стоимость on ЛЕКАРСТВО(СТОИМОСТЬ);

create index ингр__стоимость on ИНГРЕДИЕНТ(СТОИМОСТЬ);

create index лок__количество on ЛОКАЦИЯ(КОЛИЧЕСТВО);
create index лок__широта on ЛОКАЦИЯ(ШИРОТА);
create index лок__долгота on ЛОКАЦИЯ(ДОЛГОТА);

create index бол__тип on БОЛЕЗНЬ using hash(ТИП);

create index нал_ингр__годен_до on НАЛИЧИЕ_ИНГРЕДИЕНТОВ(ГОДЕН_ДО);

create index план__запрос on ПЛАН_МАРШРУТ(ИД_ЗАКАЗА, ИД_ИНГРЕДИЕНТА, ИД_ЛОКАЦИИ);
