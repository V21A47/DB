
/******************** Add Table: "АКВАТОРИЯ" ************************/

/* Build Table Structure */
DROP TABLE "АКВАТОРИЯ" CASCADE;
CREATE TABLE "АКВАТОРИЯ"
(
    "ИД_АКВАТОРИИ" Serial PRIMARY KEY,
    "ТИП" TEXT NOT NULL,
    "НАЗВАНИЕ" TEXT NOT NULL,
    "ШИРОТА" DOUBLE PRECISION NOT NULL,
    "ДОЛГОТА" DOUBLE PRECISION NOT NULL,
    "ОПИСАНИЕ" TEXT NULL
);



/******************** Add Table: "БОЛЕЗНЬ" ************************/

/* Build Table Structure */
DROP TABLE "БОЛЕЗНЬ" CASCADE;
CREATE TABLE "БОЛЕЗНЬ"
(
    "ИД_БОЛЕЗНИ" serial PRIMARY KEY,
    "НАЗВАНИЕ" TEXT NOT NULL,
    "ТИП" TEXT NOT NULL,
    "ОПИСАНИЕ" TEXT NULL
);


/******************** Add Table: "ЖИВОЕ_СУЩЕСТВО" ************************/

DROP TABLE "ЖИВОЕ_СУЩЕСТВО" CASCADE;
CREATE TABLE "ЖИВОЕ_СУЩЕСТВО"
(
    "ИД_СУЩЕСТВА" INTEGER PRIMARY KEY,
    "КЛАСС" TEXT NOT NULL,
    "СЕМЕЙСТВО" TEXT NOT NULL,
    "ВИД" TEXT NOT NULL,
    "ОПИСАНИЕ" TEXT NULL
);


/******************** Add Table: "ЗАКАЗ" ************************/


DROP TABLE "ЗАКАЗ" CASCADE;
CREATE TABLE "ЗАКАЗ"
(
    "ИД_ЗАКАЗА" serial PRIMARY KEY,
    "ИД_ЛЕКАРСТВА" INTEGER NOT NULL,
    "КОЛИЧЕСТВО" INTEGER NOT NULL,
    "НАЗВАНИЕ_АПТЕЧНОЙ_СЕТИ" TEXT NOT NULL
);

/******************** Add Table: "ИНГРЕДИЕНТ" ************************/

DROP TABLE "ИНГРЕДИЕНТ" CASCADE;
CREATE TABLE "ИНГРЕДИЕНТ"
(
    "ИД_ИНГРЕДИЕНТА" serial PRIMARY KEY,
    "НАЗВАНИЕ" TEXT NOT NULL,
    "ТИП" TEXT NOT NULL,
    "ИД_СУЩЕСТВА" INTEGER NOT NULL,
    "СТОИМОСТЬ" INTEGER NOT NULL,
    "ОПИСАНИЕ" TEXT NULL
);

/******************** Add Table: "КОРАБЛЬ" ************************/

/* Build Table Structure */

DROP TABLE "КОРАБЛЬ" CASCADE;
CREATE TABLE "КОРАБЛЬ"
(
    "ДОЛГОТА" DOUBLE PRECISION NOT NULL,
    "ШИРОТА" DOUBLE PRECISION NOT NULL,
    "СРЕДНЯЯ_СКОРОСТЬ" FLOAT NOT NULL
);

/******************** Add Table: "ЛЕКАРСТВО" ************************/

/* Build Table Structure */
DROP TABLE "ЛЕКАРСТВО" CASCADE;
CREATE TABLE "ЛЕКАРСТВО"
(
    "ИД_ЛЕКАРСТВА" serial PRIMARY KEY,
    "НАЗВАНИЕ" TEXT NOT NULL,
    "ОПИСАНИЕ" TEXT NULL,
    "ЭКСПЕРИМЕНТАЛЬНОЕ" BOOL NOT NULL,
    "СТОИМОСТЬ" INTEGER NOT NULL
);

/******************** Add Table: "ЛОКАЦИЯ" ************************/

/* Build Table Structure */
DROP TABLE "ЛОКАЦИЯ" CASCADE;
CREATE TABLE "ЛОКАЦИЯ"
(
    "ИД_ЛОКАЦИИ" serial PRIMARY KEY,
    "ИД_АКВАТОРИИ" INTEGER NOT NULL,
    "ИД_СУЩЕСТВА" INTEGER NOT NULL,
    "КОЛИЧЕСТВО" INTEGER NOT NULL,
    "ШИРОТА" DOUBLE PRECISION NOT NULL,
    "ДОЛГОТА" DOUBLE PRECISION NOT NULL
);


/******************** Add Table: "МИНЕРАЛЬНОЕ_ВЕЩЕСТВО" ************************/

/* Build Table Structure */
DROP TABLE "МИНЕРАЛЬНОЕ_ВЕЩЕСТВО" CASCADE;
CREATE TABLE "МИНЕРАЛЬНОЕ_ВЕЩЕСТВО"
(
    "ИД_СУЩЕСТВА" INTEGER PRIMARY KEY,
    "НАЗВАНИЕ " TEXT NOT NULL,
    "ХИМИЧЕСКИЙ_ТИП" TEXT NOT NULL
);


/******************** Add Table: "НАЛИЧИЕ_ИНГРЕДИЕНТОВ" ************************/

/* Build Table Structure */
DROP TABLE "НАЛИЧИЕ_ИНГРЕДИЕНТОВ" CASCADE;
CREATE TABLE "НАЛИЧИЕ_ИНГРЕДИЕНТОВ"
(
    "ИД_ИНГРЕДИЕНТА" INTEGER NOT NULL,
    "МАССА" DOUBLE PRECISION NOT NULL,
    "ГОДЕН_ДО" DATE NOT NULL
);


/******************** Add Table: "ПЛАН_МАРШРУТ" ************************/

/* Build Table Structure */
DROP TABLE "ПЛАН_МАРШРУТ" CASCADE;
CREATE TABLE "ПЛАН_МАРШРУТ"
(
    "ИД_ЗАКАЗА" INTEGER NOT NULL,
    "ИД_ИНГРЕДИЕНТА" INTEGER NOT NULL,
    "ИД_ЛОКАЦИИ" INTEGER NOT NULL,
    "СОБРАНО" BOOL NOT NULL,
    "ДАТА_ЗАВЕРШЕНИЯ" DATE NULL
);


/******************** Add Table: "СОСТАВ" ************************/

/* Build Table Structure */
DROP TABLE "СОСТАВ" CASCADE;
CREATE TABLE "СОСТАВ"
(
    "ИД_ЛЕКАРСТВА" INTEGER NOT NULL,
    "ИД_ИНГРЕДИЕНТА" INTEGER NOT NULL,
    "МАССА" FLOAT NOT NULL
);


/******************** Add Table: "СПРАВОЧНИК_СУЩЕСТВ" ************************/

/* Build Table Structure */
DROP TABLE "СПРАВОЧНИК_СУЩЕСТВ" CASCADE;
CREATE TABLE "СПРАВОЧНИК_СУЩЕСТВ"
(
    "ИД_ЗАПИСИ" serial PRIMARY KEY,
    "ИД_СУЩЕСТВА" INTEGER NOT NULL,
    "ЖИВОЕ" BOOL DEFAULT false NOT NULL
);

/******************** Add Table: "СТАТУС_ЗАКАЗА" ************************/

/* Build Table Structure */
DROP TABLE "СТАТУС_ЗАКАЗА" CASCADE;
CREATE TABLE "СТАТУС_ЗАКАЗА"
(
    "ИД_ЗАКАЗА" INTEGER NOT NULL,
    "ВЫПОЛНЕНИЕ" FLOAT NOT NULL,
    "ДАТА_ЗАВЕРШЕНИЯ" DATE NOT NULL
);


/******************** Add Table: "ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА" ************************/

/* Build Table Structure */
DROP TABLE "ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА" CASCADE;
CREATE TABLE "ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА"
(
    "ИД_ЛЕКАРСТВА" INTEGER NOT NULL,
    "ИД_БОЛЕЗНИ" INTEGER NOT NULL,
    "ЭФФЕКТИВНОСТЬ" FLOAT NOT NULL
);





/************ Add Foreign Keys ***************/

/* Add Foreign Key: fk_ЗАКАЗ_ЛЕКАРСТВО */
ALTER TABLE "ЗАКАЗ" ADD CONSTRAINT "fk_ЗАКАЗ_ЛЕКАРСТВО"
    FOREIGN KEY ("ИД_ЛЕКАРСТВА") REFERENCES "ЛЕКАРСТВО" ("ИД_ЛЕКАРСТВА")
    ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_ИНГРЕДИЕНТ_СПРАВОЧНИК_СУЩЕСТВ */
ALTER TABLE "ИНГРЕДИЕНТ" ADD CONSTRAINT "fk_ИНГРЕДИЕНТ_СПРАВОЧНИК_СУЩЕСТВ"
    FOREIGN KEY ("ИД_СУЩЕСТВА") REFERENCES "СПРАВОЧНИК_СУЩЕСТВ" ("ИД_СУЩЕСТВА")
    ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_ЛОКАЦИЯ_СПРАВОЧНИК_СУЩЕСТВ */
ALTER TABLE "ЛОКАЦИЯ" ADD CONSTRAINT "fk_ЛОКАЦИЯ_СПРАВОЧНИК_СУЩЕСТВ"
    FOREIGN KEY ("ИД_СУЩЕСТВА") REFERENCES "СПРАВОЧНИК_СУЩЕСТВ" ("ИД_СУЩЕСТВА")
    ON UPDATE NO ACTION ON DELETE NO ACTION;

/* Add Foreign Key: fk_ПОПУЛЯЦИЯ_АКВАТОРИЯ */
ALTER TABLE "ЛОКАЦИЯ" ADD CONSTRAINT "fk_ПОПУЛЯЦИЯ_АКВАТОРИЯ"
    FOREIGN KEY ("ИД_ЛОКАЦИИ") REFERENCES "ЛОКАЦИЯ" ("ИД_ЛОКАЦИИ")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_НАЛИЧИЕ_ИНГРЕДИЕНТОВ_ИНГРЕДИЕНТ */
ALTER TABLE "НАЛИЧИЕ_ИНГРЕДИЕНТОВ" ADD CONSTRAINT "fk_НАЛИЧИЕ_ИНГРЕДИЕНТОВ_ИНГРЕДИЕНТ"
    FOREIGN KEY ("ИД_ИНГРЕДИЕНТА") REFERENCES "ИНГРЕДИЕНТ" ("ИД_ИНГРЕДИЕНТА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_ПЛАН_МАРШРУТ_АКВАТОРИЯ */
ALTER TABLE "ПЛАН_МАРШРУТ" ADD CONSTRAINT "fk_ПЛАН_МАРШРУТ_АКВАТОРИЯ"
    FOREIGN KEY ("ИД_АКВАТОРИИ") REFERENCES "АКВАТОРИЯ" ("ИД_АКВАТОРИИ")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_ПЛАН_МАРШРУТ_ЗАКАЗ */
ALTER TABLE "ПЛАН_МАРШРУТ" ADD CONSTRAINT "fk_ПЛАН_МАРШРУТ_ЗАКАЗ"
    FOREIGN KEY ("ИД_ЗАКАЗА") REFERENCES "ЗАКАЗ" ("ИД_ЗАКАЗА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_ПЛАН_МАРШРУТ_ИНГРЕДИЕНТ */
ALTER TABLE "ПЛАН_МАРШРУТ" ADD CONSTRAINT "fk_ПЛАН_МАРШРУТ_ИНГРЕДИЕНТ"
    FOREIGN KEY ("ИД_ИНГРЕДИЕНТА") REFERENCES "ИНГРЕДИЕНТ" ("ИД_ИНГРЕДИЕНТА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_СОСТАВ_ИНГРЕДИЕНТ */
ALTER TABLE "СОСТАВ" ADD CONSTRAINT "fk_СОСТАВ_ИНГРЕДИЕНТ"
    FOREIGN KEY ("ИД_ИНГРЕДИЕНТА") REFERENCES "ИНГРЕДИЕНТ" ("ИД_ИНГРЕДИЕНТА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_СОСТАВ_ЛЕКАРСТВО */
ALTER TABLE "СОСТАВ" ADD CONSTRAINT "fk_СОСТАВ_ЛЕКАРСТВО"
    FOREIGN KEY ("ИД_ЛЕКАРСТВА") REFERENCES "ЛЕКАРСТВО" ("ИД_ЛЕКАРСТВА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_СПРАВОЧНИК_СУЩЕСТВ_ЖИВОЕ_СУЩЕСТВО */
ALTER TABLE "СПРАВОЧНИК_СУЩЕСТВ" ADD CONSTRAINT "fk_СПРАВОЧНИК_СУЩЕСТВ_ЖИВОЕ_СУЩЕСТВО"
    FOREIGN KEY ("ИД_СУЩЕСТВА") REFERENCES "ЖИВОЕ_СУЩЕСТВО" ("ИД_СУЩЕСТВА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_СПРАВОЧНИК_СУЩЕСТВ_МИНЕРАЛЬНОЕ_ВЕЩЕСТВО */
ALTER TABLE "СПРАВОЧНИК_СУЩЕСТВ" ADD CONSTRAINT "fk_СПРАВОЧНИК_СУЩЕСТВ_МИНЕРАЛЬНОЕ_ВЕЩЕСТВО"
    FOREIGN KEY ("ИД_СУЩЕСТВА") REFERENCES "МИНЕРАЛЬНОЕ_ВЕЩЕСТВО" ("ИД_СУЩЕСТВА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_СТАТУС_ЗАКАЗА_ЗАКАЗ */
ALTER TABLE "СТАТУС_ЗАКАЗА" ADD CONSTRAINT "fk_СТАТУС_ЗАКАЗА_ЗАКАЗ"
    FOREIGN KEY ("ИД_ЗАКАЗА") REFERENCES "ЗАКАЗ" ("ИД_ЗАКАЗА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА_БОЛЕЗНЬ */
ALTER TABLE "ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА" ADD CONSTRAINT "fk_ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА_БОЛЕЗНЬ"
    FOREIGN KEY ("ИД_БОЛЕЗНИ") REFERENCES "БОЛЕЗНЬ" ("ИД_БОЛЕЗНИ")
    ON UPDATE NO ACTION ON DELETE  CASCADE;

/* Add Foreign Key: fk_ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА_ЛЕКАРСТВО */
ALTER TABLE "ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА" ADD CONSTRAINT "fk_ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА_ЛЕКАРСТВО"
    FOREIGN KEY ("ИД_ЛЕКАРСТВА") REFERENCES "ЛЕКАРСТВО" ("ИД_ЛЕКАРСТВА")
    ON UPDATE NO ACTION ON DELETE  CASCADE;



























DROP TABLE БОЛЕЗНЬ CASCADE;
CREATE TABLE БОЛЕЗНЬ (
    ИД_БОЛЕЗНИ     serial    PRIMARY KEY,
    НАЗВАНИЕ    text    NOT NULL,
    ТИП    text    NOT NULL,
    ОПИСАНИЕ    text
);

DROP TABLE ЛЕКАРСТВО CASCADE;
CREATE TABLE ЛЕКАРСТВО (
    ИД_ЛЕКАРСТВА    serial    PRIMARY KEY,
    НАЗВАНИЕ	    text	    NOT NULL,
    ОПИСАНИЕ	    text,
    ЭКСПЕРИМЕНТАЛЬНОЕ    boolean    NOT NULL,
    СТОИМОСТЬ integer NOT NULL
);


DROP TABLE ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА CASCADE;
CREATE TABLE ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА (
    ИД_ЛЕКАРСТВА integer  REFERENCES ЛЕКАРСТВО(ИД_ЛЕКАРСТВА),
    ИД_БОЛЕЗНИ  integer  REFERENCES    БОЛЕЗНЬ(ИД_БОЛЕЗНИ),
    ЭФФЕКТИВНОСТЬ     float    CHECK (ЭФФЕКТИВНОСТЬ >= 0 AND
            ЭФФЕКТИВНОСТЬ<= 1)
);

DROP TABLE АКВАТОРИЯ CASCADE;
CREATE TABLE АКВАТОРИЯ (
    ИД_АКВАТОРИИ  serial    PRIMARY KEY,
    ТИП   text NOT NULL,
    НАЗВАНИЕ text  NOT NULL,
ШИРОТА real CHECK ( ШИРОТА >= -90 AND ШИРОТА <= 90),
ДОЛГОТА real CHECK (ДОЛГОТА >= -180 AND ДОЛГОТА <= 180),
    ОПИСАНИЕ text
);


DROP TABLE СПРАВОЧНИК_СУЩЕСТВ CASCADE;
CREATE TABLE СПРАВОЧНИК_СУЩЕСТВ (
    ИД_СУЩЕСТВА serial PRIMARY KEY,
    ЖИВОЕ boolean NOT NULL
);


DROP TABLE ИНГРЕДИЕНТ CASCADE;
CREATE TABLE ИНГРЕДИЕНТ (
    ИД_ИНГРЕДИЕНТА  serial PRIMARY KEY,
    НАЗВАНИЕ text NOT NULL,
    ИД_СУЩЕСТВА integer REFERENCES СПРАВОЧНИК_СУЩЕСТВ(ИД_СУЩЕСТВА),
    СТОИМОСТЬ integer NOT NULL,
    ОПИСАНИЕ  text
);


DROP TABLE СОСТАВ CASCADE;
CREATE TABLE СОСТАВ (
    ИД_ЛЕКАРСТВА  integer REFERENCES ЛЕКАРСТВО(ИД_ЛЕКАРСТВА),
    ИД_ИНГРЕДИЕНТА integer REFERENCES ИНГРЕДИЕНТ(ИД_ИНГРЕДИЕНТА),
    МАССА float   CHECK (МАССА > 0)
);


DROP TABLE ЛОКАЦИЯ CASCADE;
CREATE TABLE ЛОКАЦИЯ (
    ИД_ЛОКАЦИИ serial    PRIMARY KEY,
    ИД_АКВАТОРИИ integer REFERENCES АКВАТОРИЯ(ИД_АКВАТОРИИ),
    ИД_СУЩЕСТВА integer  REFERENCES СПРАВОЧНИК_СУЩЕСТВ(ИД_СУЩЕСТВА),
    КОЛИЧЕСТВО integer NOT NULL,
    ШИРОТА real CHECK ( ШИРОТА >= -90 AND ШИРОТА <= 90),
    ДОЛГОТА real CHECK (ДОЛГОТА >= -180 AND ДОЛГОТА <= 180)
);


DROP TABLE ЖИВОЕ_СУЩЕСТВО CASCADE;
CREATE TABLE ЖИВОЕ_СУЩЕСТВО (
    ИД_СУЩЕСТВА serial REFERENCES СПРАВОЧНИК_СУЩЕСТВ(ИД_СУЩЕСТВА),
    ЖИВОЕ boolean,
    КЛАСС text NOT NULL,
    СЕМЕЙСТВО text NOT NULL,
    ВИД text NOT NULL,
    ОПИСАНИЕ  text
);


DROP TABLE МИНЕРАЛЬНОЕ_ВЕЩЕСТВО CASCADE;
CREATE TABLE МИНЕРАЛЬНОЕ_ВЕЩЕСТВО (
    ИД_СУЩЕСТВА integer REFERENCES СПРАВОЧНИК_СУЩЕСТВ(ИД_СУЩЕСТВА),
    ХИМИЧЕСКИЙ_ТИП text NOT NULL,
    ОПИСАНИЕ text
);


//  не соотвествует действительности
DROP TABLE ПЛАН_МАРШРУТ CASCADE;
CREATE TABLE ПЛАН_МАРШРУТ (
    ИД_ЗАКАЗА integer PRIMARY KEY,
    ИД_ИНГРЕДИЕНТА  integer REFERENCES ИНГРЕДИЕНТ(ИД_ИНГРЕДИЕНТА),
    ИД_ЛОКАЦИИ  integer REFERENCES ЛОКАЦИЯ(ИД_ЛОКАЦИИ  ),
    СОБРАНО boolean NOT NULL,
    ДАТА_ЗАВЕРШЕНИЯ date NOT NULL
);


//  не соотвествует действительности
DROP TABLE НАЛИЧИЕ_ИНГРЕДИЕНТОВ CASCADE;
CREATE TABLE НАЛИЧИЕ_ИНГРЕДИЕНТОВ (
    ИД_ИНГРЕДИЕНТА integer REFERENCES ИНГРЕДИЕНТ(ИД_ИНГРЕДИЕНТА),
    МАССА float   CHECK (МАССА > 0),
    ИСПОЛЬЗОВАНО boolean NOT NULL,
    ГОДЕН_ДО date CHECK (ГОДЕН_ДО  > NOW())
);


DROP TABLE ЗАКАЗ CASCADE;
CREATE TABLE ЗАКАЗ (
    ИД_ЗАКАЗА serial  PRIMARY KEY,
    ИД_ЛЕКАРСТВА integer REFERENCES ЛЕКАРСТВО(ИД_ЛЕКАРСТВА),
    КОЛИЧЕСТВО integer NOT NULL,
    НАЗВАНИЕ_АПТЕЧНОЙ_СЕТИ text NOT NULL
);


DROP TABLE СТАТУС_ЗАКАЗА CASCADE;
CREATE TABLE СТАТУС_ЗАКАЗА (
    ИД_ЗАКАЗА integer REFERENCES ЗАКАЗ(ИД_ЗАКАЗА),
    НОМЕР_В_ОЧЕРЕДИ integer,
    ВЫПОЛНЕНИЕ float CHECK (ВЫПОЛНЕНИЕ >= 0 AND ВЫПОЛНЕНИЕ <= 1),
    ДАТА_ЗАВЕРШЕНИЯ date
);


DROP TABLE КОРАБЛЬ CASCADE;
CREATE TABLE КОРАБЛЬ (
ШИРОТА real CHECK ( ШИРОТА >= -90 AND ШИРОТА <= 90),
ДОЛГОТА real CHECK (ДОЛГОТА >= -180 AND ДОЛГОТА <= 180),
    СРЕДНЯЯ_СКОРОСТЬ float CHECK(СРЕДНЯЯ_СКОРОСТЬ > 0 AND 	СРЕДНЯЯ_СКОРОСТЬ <= 40)
);

insert into КОРАБЛЬ (ШИРОТА, ДОЛГОТА, СРЕДНЯЯ СКОРОСТЬ)
    values (40, 133, 0.7);

\copy БОЛЕЗНЬ(НАЗВАНИЕ, ТИП, ОПИСАНИЕ) FROM 'desease';
\copy ЛЕКАРСТВО(НАЗВАНИЕ, ОПИСАНИЕ, ЭКСПЕРИМЕНТАЛЬНОЕ, СТОИМОСТЬ) FROM 'medicines';
\copy ЭФФЕКТИВНОСТЬ_ЛЕКАРСТВА FROM 'lekar_des';
\copy СПРАВОЧНИК_СУЩЕСТВ(ЖИВОЕ) FROM 'catalog';
\copy ИНГРЕДИЕНТ(НАЗВАНИЕ, ИД_СУЩЕСТВА, СТОИМОСТЬ) FROM 'ingredients';
\copy СОСТАВ (ИД_ЛЕКАРСТВА, ИД_ИНГРЕДИЕНТА, МАССА) FROM 'sostav';
\copy АКВАТОРИЯ(ТИП, НАЗВАНИЕ, ШИРОТА, ДОЛГОТА, ОПИСАНИЕ) FROM 'aquatories';
\copy МИНЕРАЛЬНОЕ_ВЕЩЕСТВО(ИД_СУЩЕСТВА, ХИМИЧЕСКИЙ_ТИП, ОПИСАНИЕ) FROM 'minerals';
\copy ЛОКАЦИЯ(ИД_АКВАТОРИИ, ИД_СУЩЕСТВА, КОЛИЧЕСТВО, ШИРОТА, ДОЛГОТА) FROM 'locationFile';
\copy ЖИВОЕ_СУЩЕСТВО(КЛАСС, СЕМЕЙСТВО, ВИД, ОПИСАНИЕ) FROM 'aliveCreatures';



/*
    Рассчет расстояний до всех локаций, в которых есть определенный организм,
    из которого получается нужный ингредиент.
    Просто переписать условие where.
*/
select MIN (select loc.ИД_ЛОКАЦИИ, (

select id,
    MIN(distance)
    from (
        select loc.ИД_ЛОКАЦИИ as id,
            SQRT(
                (loc.ШИРОТА - (select ШИРОТА from КОРАБЛЬ))*(loc.ШИРОТА-(select ШИРОТА from КОРАБЛЬ) ) +
                (loc.ДОЛГОТА-(select ДОЛГОТА from КОРАБЛЬ))*(loc.ДОЛГОТА-(select ДОЛГОТА from КОРАБЛЬ))
            ) as distance
        from ЛОКАЦИЯ as loc
            join СПРАВОЧНИК_СУЩЕСТВ using(ИД_СУЩЕСТВА)
            join ИНГРЕДИЕНТ using(ИД_СУЩЕСТВА)
        where СПРАВОЧНИК_СУЩЕСТВ.ИД_СУЩЕСТВА = ИНГРЕДИЕНТ.ИД_СУЩЕСТВА
            and ИНГРЕДИЕНТ.НАЗВАНИЕ='Аллантоин'
        ) as templ
    group by templ.id;
